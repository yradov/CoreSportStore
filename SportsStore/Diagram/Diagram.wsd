@startuml SportsStore

skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor red
skinparam titleBackgroundColor Aqua-CadetBlue

title SportsStore

class Product {
    + long ProductID
    + string Name
    + string Description
    + decimal Price
    + string Category
}

class Order {
    + int OrderId
    + ICollection<CartLine> Lines
    + string Name
    + string Line1
    + string Line2
    + string Line3
    + string City
    + string State
    + string Zip
    + string Country
    + bool GiftWrap
}

CartLine "Many" --* "One" Order
'Cart -- Order : Lines

class CartLine
{
    + int CartLineId
    + Product Product
    + int Quantity
}

Product "1" --* "1" CartLine 

class Cart
{
    + List<CartLine> <b>Lines</b>
    + virtual void <b>AddItem</b>(Product product, int quantity)
    + virtual void <b>RemoveLine</b>(Product product)
    + decimal <b>ComputeTotalValue</b>()
    + virtual void <b>Crear</b>()
}

class SessionCart
{
    + ISession Session
    + static Cart <b>GetCart</b>(IServiceProvider services)
    + override void <b>AddItem</b>(Product product, int quantity)
    + override void <b>RemoveLine</b>(Product product)
    + override void <b>Crear</b>()
}

Cart <|-- SessionCart
CartLine "Many" --* "One" Cart

class StoreDbContext
{
    + StoreDbContext(DbContextOptions<StoreDbContext> options) : base(options){}
    + DbSet<Product> Products
    + DbSet<Order> Orders
}

Microsoft.EntityFrameworkCore.DbContext <|-- StoreDbContext

interface IOrderRepository
{
    IQueryable<Order> Orders 
    void SaveOrder(Order order)
}

class EFOrderRepository
{
    - StoreDbContext <b>context</b>
    + IQueryable<Order> <b>Orders</b>
    + <b>EFOrderRepository</b>(StoreDbContext ctx)
    
    + void <b>SaveOrder</b>(Order order)
}
IOrderRepository <|.. EFOrderRepository
StoreDbContext o-- EFOrderRepository

interface IStoreRepository
{
    IQueryable<Product> Products
}

class EFStoreRepository
{
    - StoreDbContext <b>context</b>;
    + <b>EFStoreRepository</b>(StoreDbContext ctx)
    + IQueryable<Product> <b>Products</b>
}
IStoreRepository <|.. EFStoreRepository
StoreDbContext o-- EFStoreRepository

class PagingInfo
{
    + int TotalItems
    + int ItemsPerPage
    + int CurrentPage
    + int TotalPages()
}

class ProductsListViewModel
{
    + IEnumerable<Product> Products
    + PagingInfo PagingInfo 
    + string CurrentCategory 
}

PagingInfo "1" --* "1" ProductsListViewModel

@end SportsStore