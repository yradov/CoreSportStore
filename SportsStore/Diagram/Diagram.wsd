@startuml SportsStore

skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor red
skinparam titleBackgroundColor Aqua-CadetBlue

title SportsStore

class Product {
    + long ProductID
    + string Name
    + string Description
    + decimal Price
    + string Category
}

class Order {
    + int OrderId
    + ICollection<CartLine> Lines
    + string Name
    + string Line1
    + string Line2
    + string Line3
    + string City
    + string State
    + string Zip
    + string Country
    + bool GiftWrap
}

CartLine "Many" --* "One" Order
'Cart -- Order : Lines

class CartLine
{
    + int CartLineId
    + Product Product
    + int Quantity
}

Product "1" --* "1" CartLine 

class Cart
{
    + List<CartLine> <b>Lines</b>
    + virtual void <b>AddItem</b>(Product product, int quantity)
    + virtual void <b>RemoveLine</b>(Product product)
    + decimal <b>ComputeTotalValue</b>()
    + virtual void <b>Crear</b>()
}

class SessionCart
{
    + ISession Session
    + static Cart <b>GetCart</b>(IServiceProvider services)
    + override void <b>AddItem</b>(Product product, int quantity)
    + override void <b>RemoveLine</b>(Product product)
    + override void <b>Crear</b>()
}

Cart <|-- SessionCart
CartLine "Many" --* "One" Cart

class StoreDbContext
{
    + StoreDbContext(DbContextOptions<StoreDbContext> options) : base(options){}
    + DbSet<Product> Products
    + DbSet<Order> Orders
}

Microsoft.EntityFrameworkCore.DbContext <|-- StoreDbContext

interface IOrderRepository
{
    IQueryable<Order> Orders 
    void SaveOrder(Order order)
}

class EFOrderRepository
{
    - StoreDbContext <b>context</b>
    + IQueryable<Order> <b>Orders</b>
    + <b>EFOrderRepository</b>(StoreDbContext ctx)
    
    + void <b>SaveOrder</b>(Order order)
}
IOrderRepository <|.. EFOrderRepository
StoreDbContext o-- EFOrderRepository

interface IStoreRepository
{
    IQueryable<Product> Products
}

class EFStoreRepository
{
    - StoreDbContext <b>context</b>;
    + <b>EFStoreRepository</b>(StoreDbContext ctx)
    + IQueryable<Product> <b>Products</b>
}
IStoreRepository <|.. EFStoreRepository
StoreDbContext o-- EFStoreRepository

class PagingInfo
{
    + int TotalItems
    + int ItemsPerPage
    + int CurrentPage
    + int TotalPages()
}

class ProductsListViewModel
{
    + IEnumerable<Product> Products
    + PagingInfo PagingInfo 
    + string CurrentCategory 
}

ProductsListViewModel "1" *-- "1" PagingInfo


class HomeController
{
    - IStoreRepository repository;
    + int PageSize = 4;

    + HomeController(IStoreRepository repo)

    + ViewResult Index(string category, int productPage = 1) 
}

Microsoft.AspNetCore.Mvc.Controller <|-- HomeController
HomeController ..> ProductsListViewModel
HomeController o-- IStoreRepository

note right of HomeController::repository
  in Startup::ConfigureServices()
  services.AddScoped<IStoreRepository, EFStoreRepository>();
end note

note right of HomeController::Index
  return View(new ProductsListViewModel
            {
                Products = repository.Products
                    .Where(p => category == null || p.Category == category)
                    .OrderBy(p => p.ProductID)
                    .Skip((productPage - 1) * PageSize)
                    .Take(PageSize),
                PagingInfo = new PagingInfo
                {
                    CurrentPage = productPage,
                    ItemsPerPage = PageSize,
                    TotalItems = category == null ? 
                    repository.Products.Count() :
                    repository.Products.Where(e => e.Category == category).Count()
                },
                CurrentCategory = category
            });
end note


class OrderController
{
    - IOrderRepository repository;
    - Cart cart;
    + OrderController(IOrderRepository repoService, Cart cartService)

    + ViewResult Checkout() => View(new Order())

    /'HttpPost'/
    + IActionResult Checkout(Order order)
}

Microsoft.AspNetCore.Mvc.Controller <|-- OrderController
OrderController  o-- IOrderRepository
OrderController o-- Cart

note left of OrderController
    <b>in [HttpPost] Checkout(Order order):</b>
    <code>
    if (ModelState.IsValid)
    {
        order.Lines = cart.Lines.ToArray();
        repository.SaveOrder(order);
        cart.Crear();
        return RedirectToPage("/Completed", new { orderId = order.OrderId});
    }
    </code>
end note

@end SportsStore